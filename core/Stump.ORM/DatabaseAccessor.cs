using System;
using System.Collections.Generic;
using System.Reflection;
using Stump.ORM.SubSonic.DataProviders;
using Stump.ORM.SubSonic.Extensions;
using Stump.ORM.SubSonic.Schema;

namespace Stump.ORM
{
    public class DatabaseAccessor
    {
        private class MappingEntry
        {
            public MappingEntry()
            {
            }

            public MappingEntry(Type type, ITable table)
            {
                Type = type;
                Table = table;
            }

            public MappingEntry(Type type)
            {
                Type = type;
            }

            public Type Type
            {
                get;
                set;
            }

            public ITable Table
            {
                get;
                set;
            }
        }

        private List<MappingEntry> m_mapping = new List<MappingEntry>();
        private List<Assembly> m_assemblies = new List<Assembly>();

        public DatabaseAccessor()
        {
            Configuration = new DatabaseConfiguration();
        }
        
        public DatabaseAccessor(DatabaseConfiguration configuration)
        {
            Configuration = configuration;
        }

        public DatabaseConfiguration Configuration
        {
            get;
            set;
        }

        public IDataProvider DataProvider
        {
            get;
            private set;
        }

        public Database Database
        {
            get;
            private set;
        }

        public void RegisterMappingAssembly(Assembly assembly)
        {
            m_assemblies.Add(assembly);
        }

        public void Initialize()
        {
            foreach (var assembly in m_assemblies)
            {
                foreach (var type in assembly.GetTypes())
                {
                    if ((HasInterface(type, typeof(IAutoGeneratedRecord)) || HasInterface(type, typeof(IManualGeneratedRecord))) && type.IsClass)
                    {
                        m_mapping.Add(new MappingEntry(type));
                    }
                }
            }
        }

        public void AddMappedType(Type type)
        {
            if ((typeof(IAutoGeneratedRecord).IsAssignableFrom(type) ||
                        typeof(IManualGeneratedRecord).IsAssignableFrom(type)) && type.IsClass)
            {
                m_mapping.Add(new MappingEntry(type));
            }
        }

        public void OpenConnection(Database database)
        {
            DataProvider = ProviderFactory.GetProvider(Configuration.GetConnectionString(), Configuration.ProviderName);
            Database = database;

            Database.OpenSharedConnection();

            foreach (var map in m_mapping)
            {
                if (map.Table != null)
                    continue;

                ITable table;
                if (map.Type.GetInterface(typeof(IManualGeneratedRecord).FullName) != null)
                {
                    var instance = Activator.CreateInstance(map.Type, true);
                    table = ( (IManualGeneratedRecord)instance ).GetTableInformation(DataProvider);
                }
                else
                {
                    table = map.Type.ToSchemaTable(DataProvider);
                }

                map.Table = table;

                var query = map.Table.CreateSql;

                Database.Execute(query);
            }
        }

        public void OpenConnection()
        {
            var db = new Database(Configuration.GetConnectionString(), Configuration.ProviderName)
                {
                    KeepConnectionAlive = true,
                    CommandTimeout = (24 * 60 * 60)
                };

            OpenConnection(db);
        }

        public void CloseConnection()
        {
           Database.CloseSharedConnection();
        }

        private static bool HasInterface(Type type, Type interfaceType)
        {
            return type.FindInterfaces(FilterByName, interfaceType).Length > 0;
        }

        private static bool FilterByName(Type typeObj, Object criteriaObj)
        {
            return typeObj.ToString() == criteriaObj.ToString();
        }
    }
}